import { HTMLElement } from 'node-html-parser';

interface GeneralInformation {
    /**
     * 캐릭터 이름
     */
    name: string;
    /**
     * 월드
     */
    world: string;
    /**
     * 직업
     */
    job: string;
    /**
     * 길드
     */
    guild: string;
    /**
     * 레벨
     */
    level: number;
    /**
     * 캐릭터 이미지 url
     */
    imageUrl: string;
    /**
     * 성향
     */
    traits: Traits;
}
interface Traits {
    /**
     * 카리스마
     */
    ambition: number;
    /**
     * 통찰력
     */
    insight: number;
    /**
     * 의지
     */
    willpower: number;
    /**
     * 손재주
     */
    diligence: number;
    /**
     * 감성
     */
    empathy: number;
    /**
     * 매력
     */
    charm: number;
}

declare const statList: readonly ["str", "dex", "int", "luk", "strP", "dexP", "intP", "lukP", "hp", "hpP", "mp", "mpP", "atk", "atkP", "mAtk", "mAtkP", "def", "defP", "speed", "jump", "ignoreDef", "mobDmg", "bossDmg", "dmg", "allStat", "allStatP", "crit", "critDmg", "buff", "statusDmg", "arcane", "lvNAtk", "lvNmAtk", "lv9Str", "lv9Dex", "lv9Int", "lv9Luk", "meso", "drop", "hpHeal", "passive", "reuse", "exp"];
type Stat = (typeof statList)[number];
type Stats = Partial<Record<Stat, number>>;

interface Spec {
    /**
     * 앞 스공
     */
    statAtkLow: number;
    /**
     * 뒷 스공
     */
    statAtkHigh: number;
    /**
     * HP
     */
    hp: number;
    /**
     * MP
     */
    mp: number;
    /**
     * 힘
     */
    str: number;
    /**
     * 덱
     */
    dex: number;
    /**
     * 인
     */
    int: number;
    /**
     * 럭
     */
    luk: number;
    /**
     * 크리 데미지
     */
    critDmg: number;
    /**
     * 보스 데미지
     */
    bossDmg: number;
    /**
     * 방어율 무시
     */
    ignoreDef: number;
    /**
     * 상태이상 내성
     */
    resistance: number;
    /**
     * 스탠스
     */
    stance: number;
    /**
     * 방어력
     */
    def: number;
    /**
     * 이동속도
     */
    speed: number;
    /**
     * 점프력
     */
    jump: number;
    /**
     * 스타포스
     */
    starForce: number;
    /**
     * 아케인포스
     */
    arcaneForce: number;
    /**
     * 어빌리티
     */
    abilities: Stats;
    /**
     * 하이퍼스탯
     */
    hypers: Stats;
}

declare const potentialGrades: readonly ["nothing", "rare", "epic", "unique", "legendary", "special"];
type PotentialGrade = (typeof potentialGrades)[number];
interface Potential {
    grade: PotentialGrade;
    effects: Stats[];
}

interface Symbol {
    /**
     * 심볼 이름
     */
    name: string;
    /**
     * 스탯 목록
     */
    stat: Stats;
    /**
     * 레벨
     */
    level: number;
    /**
     * 현제 경험치
     */
    experience: number;
    /**
     * 레벨업에 필요한 경험치
     */
    requiredExperience: number;
}

interface EquipmentBase {
    /**
     * 이름
     */
    name: string;
    /**
     * 이미지 링크
     */
    imageUrl: string;
    /**
     * 종류
     */
    category: string;
    /**
     * 업그레이드 횟수
     */
    upgrade: number;
    /**
     * 기본 스탯
     */
    base: Stats;
    /**
     * 작 스탯
     */
    scroll: Stats;
    /**
     * 가위 사용 가능 횟수
     */
    scissors?: number;
}
interface Equipment extends EquipmentBase {
    /**
     * 레벨제한
     */
    level: number;
    /**
     * 총 등급
     */
    grade: PotentialGrade;
    /**
     * 스타포스
     */
    star?: number;
    /**
     * 잠재능력
     */
    potential?: Potential;
    /**
     * 에디셔널 잠재능력
     */
    additional?: Potential;
    /**
     * 추가옵션
     */
    flame: Stats;
    /**
     * 소울
     */
    soul?: Stats;
}
interface CashEquipment extends EquipmentBase {
}

declare class EquipmentParser {
    /**
     * 장비 정보 html에서 장비 효과를 파싱하여 반환
     * @param equipmentHtml 장비 html
     */
    parseBase(equipmentHtml: string): Equipment;
    /**
     * 장비 정보 html에서 캐시 장비 효과를 파싱하여 반환
     * @param equipmentHtml 장비 html
     */
    parseCash(equipmentHtml: string): CashEquipment;
    /**
     * 장비 정보 html에서 심볼 장비 효과를 파싱하여 반환
     * @param equipmentHtml 장비 html
     */
    parseSymbol(equipmentHtml: string): Symbol;
    private parseSymbolOptions;
    private parseLevel;
    private parseOptions;
    private parseGrade;
    private parseStat;
    private parseSoul;
    private parsePotential;
    private parseCategory;
    private parseImage;
    private parseName;
}

declare class GeneralInformationParser {
    parse(specPageHtml: string): GeneralInformation;
    private parseName;
    private parseLevel;
    private parseImageUrl;
    private parseTraits;
}

interface EquipmentLinks {
    base: string[];
    cash: string[];
    symbol: string[];
}
/**
 * 공식 홈페이지 html에서 링크 파싱
 */
declare class HomePageParser {
    /**
     * 공식홈페이지 랭킹페이지에서 캐릭터를 검색하고 찾으면 해당 캐릭터 링크를 반환
     * @param name 검색할 캐릭터 닉네임 (영어가 포함된 경우 대소문자를 구분하지 않음)
     * @param rankingPageHtml 열려있는 랭킹 페이지 html
     */
    getCharacterLink(name: string, rankingPageHtml: string): string;
    /**
     * 정보가 비공개일시 에러를 던짐
     * @param html 열려있는 페이지 html
     */
    ensureIsPublic(html: string, scope: string): void;
    /**
     * 캐릭터 정보 페이지에서 장비 링크를 반환
     * @param characterLinkPageHtml 캐릭터 정보 페이지 html
     */
    getEquipmentPageLink(characterLinkPageHtml: string): string;
    /**
     * 캐릭터 정보 페이지에서 펫 링크를 반환
     * @param characterLinkPageHtml 캐릭터 정보 페이지 html
     */
    getPetPageLink(characterLinkPageHtml: string): string;
    /**
     * 장비 정보 페이지에서 착용중인 기본 아이템, 캐시 아이템, 아케인 심볼 링크들을 반환
     * @param equipmentPageHtml 캐릭터 장비 정보 페이지 html
     */
    getEquipmentLinks(equipmentPageHtml: string): EquipmentLinks;
    /**
     * 펫 장비 정보 페이지에서 착용중인 펫장비 아이템 링크들을 반환
     * @param petEquipmentPageHtml 펫 정보 페이지 html
     */
    getPetEquipmentLinks(petEquipmentPageHtml: string): string[];
}

declare class SpecParser {
    /**
     * 캐릭터 정보 페이지 html에서 스펙을 파싱하여 반환
     * @param specPageHtml
     */
    parse(specPageHtml: string): Spec;
    private parseHypers;
    private parseAbilities;
}

interface Character extends GeneralInformation {
    equipments?: Equipment[];
    spec: Spec;
    arcanes?: Symbol[];
    petEquipments?: CashEquipment[];
    cashEquipments?: CashEquipment[];
}

declare class NotValidSpecPageError extends Error {
    constructor();
}

declare class OpenPageError extends Error {
    constructor(title: string);
}

declare class PrivateInformationError extends Error {
    constructor(scope?: string);
}

declare class RetryError extends Error {
    constructor(item: string);
}

declare class RankingSearchError extends Error {
    characterName: string;
    constructor(characterName: string);
}

declare class NotFoundError extends Error {
    constructor(item: string);
}

declare class NotValidHtmlNodeError extends Error {
    node: HTMLElement;
    selector: string;
    constructor(node: HTMLElement, selector: string);
}

declare class MapleUtilsParser {
    private homePageParser;
    private equipmentParser;
    private specParser;
    private generalInformationParser;
    constructor(homePageParser: HomePageParser, equipmentParser: EquipmentParser, specParser: SpecParser, generalInformationParser: GeneralInformationParser);
    static new(): MapleUtilsParser;
    private getCharacterInfo;
    getCharacter({ name, cash, pet, equip, symbol, }: {
        name: string;
        cash?: boolean;
        pet?: boolean;
        equip?: boolean;
        symbol?: boolean;
    }): Promise<Character>;
    getCharacterWithErrors({ name, cash, pet, equip, symbol, }: {
        name: string;
        cash?: boolean;
        pet?: boolean;
        equip?: boolean;
        symbol?: boolean;
    }): Promise<{
        data: {
            spec: Spec;
            equipments: Equipment[] | undefined;
            arcanes: Symbol[] | undefined;
            cashEquipments: CashEquipment[] | undefined;
            petEquipments: CashEquipment[] | undefined;
            name: string;
            world: string;
            job: string;
            guild: string;
            level: number;
            imageUrl: string;
            traits: Traits;
        };
        errors: {
            equipments: (() => Promise<Equipment[]>) | undefined;
            arcanes: (() => Promise<Symbol[]>) | undefined;
            cashEquipments: (() => Promise<CashEquipment[]>) | undefined;
            petEquipments: (() => Promise<CashEquipment[]>) | undefined;
        } | undefined;
    }>;
    private getCharacterLink;
    private getSpecPage;
    private getEquipments;
    private getPetEquipments;
    private getAllHtmls;
}

export { MapleUtilsParser, NotFoundError, NotValidHtmlNodeError, NotValidSpecPageError, OpenPageError, PrivateInformationError, RankingSearchError, RetryError };
